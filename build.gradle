plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}


group = 'net.davoleo'
version = '0.1.0'

java {
    archivesBaseName = 'mettle'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

configurations {
    shade
}

minecraft {

    mappings channel: 'parchment', version: '2022.07.17-1.18.2'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    runs {
        client {
            workingDirectory project.file('run')

            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'mettle'

            mods {
                mettle {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'mettle'

            mods {
                mettle {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'mettle'

            mods {
                mettle {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'mettle', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                mettle {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { // Registrate
        url "https://maven.tterrag.com/"
    }
    mavenLocal()
}

dependencies {

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}" // This should already be here

    def registrate = "com.tterrag.registrate:Registrate:MC${minecraft_version}-${registrate_version}"
    implementation fg.deobf(registrate)
    shade registrate

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

shadowJar {
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'net.davoleo.repack.registrate'
}
build.dependsOn shadowJar

task apiJar(type: Jar, dependsOn: 'classes') {
    description = "BANANEEEEEEEEEEEEEEEEEEEEE"
    group = 'build'
    classifier = 'api'
    from(sourceSets.main.output) {
        include('net/davoleo/mettle/api/**')
    }
}
build.dependsOn apiJar

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
            "Specification-Title"     : "mettle",
            "Specification-Vendor"    : "Davoleo, Matpac",
            "Specification-Version"   : "1", // We are version 1 of ourselves
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : project.jar.archiveVersion,
            "Implementation-Vendor"   : "Davoleo, Matpac",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

reobf {
    shadowJar {}
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
